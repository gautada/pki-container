#!/bin/sh 

# pki-create-server: Creates a new server  key/certficate pair

if [ -z $1 ] ; then
 echo "[ERROR] Client host must be provided (host.domain.tld)"
 exit 1
fi

MOUNT_POINT=/mnt/vault
EXPORT_POINT=/opt/pki/outbox

/usr/bin/vault-umount
/usr/bin/vault-mount

FQDN=$1
DOMAIN=$(~/fqdn-parser $FQDN domain)
DOMAIN_TLD=$(~/fqdn-parser $FQDN domain.tld)
HOST=$(~/fqdn-parser $FQDN host)

if [ -f "/opt/pki/envars" ] ; then
 # export $(/bin/cat envars | xargs)
 source /opt/pki/envars 
fi

/bin/mountpoint -q $MOUNT_POINT
if [ $? -eq 1 ] ; then
 echo "[ERROR] Vault is not mounted"
 exit 1
fi

CA_POINT=$MOUNT_POINT/servers/$DOMAIN_TLD 
/bin/mkdir -p $CA_POINT 

echo "WORKING CA_POINT:$CA_POINT"
# TEST PARAMS: --dry-run --test-cert
/usr/bin/certbot certonly -v --agree-tos --config-dir=$CA_POINT \
  --logs-dir=/home/pki/logs --work-dir=/home/pki/run \
  --email $CERTBOT_EMAIL --manual --manual-auth-hook=/home/pki/manual-auth-hook \
  --noninteractive --preferred-challenges=dns -d $FQDN

# if [ $? -eq 0 ] ; then
#  CA_SRC="/mnt/vault/servers/$DOMAIN_TLD/live/$DOMAIN_TLD"
#  /usr/bin/openssl pkcs12 -export -out $EXPORT_POINT/$DOMAIN.pfx \
#    -inkey $CA_SRC/privkey.pem -in $CA_SRC/fullchain.pem
#  /usr/bin/kubectl create secret generic tls-$FQDN --from-file=$FQDN.crt=$CA_SRC/fullchain.pem --from-file=$DOMAIN.key=$CA_SRC/privkey.pem
fi
