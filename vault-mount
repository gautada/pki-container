#!/bin/sh


mount_vault () {
  name=$1
  key="/home/pki/repo/$1.evd"
  vault="/dev/mapper/$1"
  mount="/mnt/pki/$1"
  if [ ! -f $key ] ; then
    echo "Key file ($1) not found in repository."
  else
    if [ ! -d $mount ] ; then 
      echo "Mount point ($1) not found."
    else
      read -n4 -p "Decrypt and mount vault $name? (type capitalized 'yes' to confirm)> " confirm
      case $confirm in
      "YES") echo "Opening $key as $1" \
              && sudo cryptsetup luksOpen $key $1 \
              && echo "Mounting $name as $mount" \
              && sudo mount "$vault" "$mount"
             if [ $? -eq 0 ] ; then
               echo "Successfully mounted $name."
               date +%s > "$mount/.last"
             else
               echo "Failed with exit code $?."
               echo "Attempting Rollback"
               sudo umount "$mount"
               sudo cryptsetup luksClose $name
             fi
        ;;
      *) echo "]$confirm["
         echo "Not mounting vault $name" 
         exit 99 
        ;;
      esac
    fi
  fi
}

if [ ! -d /home/pki/repo ] ; then
  echo "key repository not configured."
else
  cd /home/pki/repo
  if [ ! -d /home/pki/repo/.git ] ; then 
    echo "No key repository setup"
  else
    echo "Updating ecrypted virtual drives"
    git pull
  fi
  if [ -z $1 ] ; then
    for p in /home/pki/keys/*.evd ; do # loop through the evd files 
      f=${p%.evd}
      v=${f##*/}
      mount_vault $v
    done
  else
    mount_vault $1
  fi
fi

cd /home/pki # Reset to pki home directory
