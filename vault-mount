#!/bin/sh

# vault-mount: Opens the vault device (decrypts) and mounts to mount point.

MOUNT_POINT=/mnt/vault

if [ ! -d $MOUNT_POINT ] ; then
 echo "[WARN] Creating mount point"
 /usr/bin/sudo /bin/mkdir -p $MOUNT_POINT
 /usr/bin/sudo /bin/chown pki:pki $MOUNT_POINT
fi

if [ ! -f "/opt/pki/vault.evhd" ] ; then
 echo "[ERROR] Vault(/opt/pki/vault.evhd) not found."
 exit 5
fi

# Check vault status
STATUS="$(/usr/bin/sudo /sbin/cryptsetup status vault)"
RTN=$?
if [ $RTN -eq 0 ] ;  then
 echo "[ERROR] Vault is already open."
 echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
 echo "$STATUS"
 exit 6
fi
if [ ! $RTN -eq 4 ] ;  then
 echo "[ERROR] Vault status check failed."
 echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
 echo "$RTN"
 echo "$STATUS"
 exit 7
fi

# Open Vault
/usr/bin/sudo /sbin/cryptsetup luksOpen /opt/pki/vault.evhd vault
if [ ! $? -eq 0 ] ;  then
 echo "[ERROR] Unable to open vault(/opt/pki/vault.evhd)."
 echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
 ls -l /dev/mapper
 exit 8
fi

if [ ! -f "$MOUNT_POINT/.last" ] ; then
 /usr/bin/sudo /bin/mount /dev/mapper/vault $MOUNT_POINT
 if [ ! $? -eq 0 ] ;  then
  echo "[ERROR] Unable to mount vault($MOUNT_POINT)."
  exit 9
 fi
 # Force all files in vault to be owned by container users
 /usr/bin/sudo chown -R pki:pki $MOUNT_POINT
 # Refresh the keep-alive ticker
 /usr/bin/vault-refresh
fi
