#!/bin/sh

# vault-mount: Opens the vault device (decrypts) and mounts to mount point.

MOUNT_POINT="/mnt/vault"
VAULT_PATH="/mnt/volumes/container/vault.evhd"

# If the mount point does not exist then create it.
if [ ! -d $MOUNT_POINT ] ; then
 echo "[WARN] Creating mount point"
 /usr/bin/sudo /bin/mkdir -p $MOUNT_POINT
 /usr/bin/sudo /bin/chown pki:pki $MOUNT_POINT
fi

# Make sure vault exists
if [ ! -f "$VAULT_PATH" ] ; then
 echo "[ERROR] Vault(/$VAULT_PATH) not found."
 exit 5
fi

# Check vault status
STATUS="$(/usr/bin/sudo /sbin/cryptsetup status vault)"
RTN=$?
if [ $RTN -eq 0 ] ;  then
 echo "[ERROR] Vault is already open."
 echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
 echo "$STATUS"
 exit 6
fi
if [ ! $RTN -eq 4 ] ;  then
 echo "[ERROR] Vault status check failed."
 echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
 echo "$RTN"
 echo "$STATUS"
 exit 7
fi

# Open Vault
/usr/bin/sudo /sbin/cryptsetup luksOpen $VAULT_PATH vault
if [ ! $? -eq 0 ] ;  then
 echo "[ERROR] Unable to open vault($VAULT_PATH)."
 echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
 ls -l /dev/mapper
 exit 8
fi

/bin/mountpoint -q $MOUNT_POINT
if [ $? -ne 0 ] ; then
 /usr/bin/sudo /bin/mount /dev/mapper/vault $MOUNT_POINT
 if [ $? -ne 0 ] ;  then
  echo "[ERROR] Unable to mount($_TEST) vault($MOUNT_POINT)."
  exit 9
 else
    # Force all files in vault to be owned by container users
    /usr/bin/sudo chown -R pki:pki $MOUNT_POINT
    # Refresh the keep-alive ticker
    /usr/bin/vault-refresh
 fi
fi
